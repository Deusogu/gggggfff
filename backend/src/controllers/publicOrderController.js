const Order = require('../models/Order');
const Review = require('../models/Review');

// Get order details by orderId (public - no auth required)
const getPublicOrder = async (req, res) => {
  try {
    const { orderId } = req.params;
    
    const order = await Order.findOne({ orderId })
      .populate('productId', 'name game instruction_url support_contact')
      .populate('sellerId', 'username sellerInfo.businessName');

    if (!order) {
      return res.status(404).json({
        success: false,
        message: 'Order not found'
      });
    }

    // Only return order if it's completed
    if (order.status !== 'completed') {
      return res.status(403).json({
        success: false,
        message: 'Order is not yet completed'
      });
    }

    // Check if review exists
    const review = await Review.findOne({ orderId: order._id });

    res.json({
      success: true,
      order: {
        orderId: order.orderId,
        productName: order.productSnapshot.name,
        game: order.productSnapshot.game,
        duration: order.productSnapshot.duration,
        amount: order.amount,
        total: order.total,
        purchaseTime: order.createdAt,
        email: order.email,
        paymentMethod: order.paymentMethod,
        paymentStatus: order.paymentStatus,
        licenseKey: order.license_key,
        instructionUrl: order.productSnapshot.instruction_url,
        supportContact: order.productSnapshot.support_contact,
        hasReviewed: !!review
      }
    });
  } catch (error) {
    console.error('Get public order error:', error);
    res.status(500).json({
      success: false,
      message: 'Error fetching order'
    });
  }
};

// Submit review for order (public - no auth required)
const submitReview = async (req, res) => {
  try {
    const { orderId } = req.params;
    const { rating, comment } = req.body;

    // Validate rating
    if (!rating || rating < 1 || rating > 5) {
      return res.status(400).json({
        success: false,
        message: 'Rating must be between 1 and 5'
      });
    }

    // Find order
    const order = await Order.findOne({ orderId });
    if (!order) {
      return res.status(404).json({
        success: false,
        message: 'Order not found'
      });
    }

    // Check if order is completed
    if (order.status !== 'completed') {
      return res.status(403).json({
        success: false,
        message: 'Can only review completed orders'
      });
    }

    // Check if review already exists
    const existingReview = await Review.findOne({ orderId: order._id });
    if (existingReview) {
      return res.status(400).json({
        success: false,
        message: 'Review already submitted for this order'
      });
    }

    // Create review
    const review = await Review.create({
      orderId: order._id,
      productId: order.productId,
      buyerEmail: order.buyerEmail || order.email,
      rating,
      comment: comment || '',
      isAutoGenerated: false
    });

    // Update product rating
    const Product = require('../models/Product');
    const product = await Product.findById(order.productId);
    if (product) {
      await product.updateRating(rating, true);
    }

    res.json({
      success: true,
      message: 'Review submitted successfully',
      review
    });
  } catch (error) {
    console.error('Submit review error:', error);
    res.status(500).json({
      success: false,
      message: 'Error submitting review'
    });
  }
};

// Get product reviews (public)
const getProductReviews = async (req, res) => {
  try {
    const { productId } = req.params;
    const { page = 1, limit = 20 } = req.query;

    const reviews = await Review.find({ productId })
      .sort('-createdAt')
      .limit(limit * 1)
      .skip((page - 1) * limit)
      .lean();

    const total = await Review.countDocuments({ productId });

    res.json({
      success: true,
      reviews,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total,
        pages: Math.ceil(total / limit)
      }
    });
  } catch (error) {
    console.error('Get product reviews error:', error);
    res.status(500).json({
      success: false,
      message: 'Error fetching reviews'
    });
  }
};

module.exports = {
  getPublicOrder,
  submitReview,
  getProductReviews
};
